// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include <extrae.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// start_runtime
void start_runtime();
RcppExport SEXP _RCOMPSs_start_runtime() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    start_runtime();
    return R_NilValue;
END_RCPP
}
// stop_runtime
void stop_runtime(int code);
RcppExport SEXP _RCOMPSs_stop_runtime(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type code(codeSEXP);
    stop_runtime(code);
    return R_NilValue;
END_RCPP
}
// register_core_element
void register_core_element(std::string CESignature, std::string ImplSignature, std::string ImplConstraints, std::string ImplType, std::string ImplLocal, std::string ImplIO, CharacterVector prolog, CharacterVector epilog, CharacterVector container, CharacterVector typeArgs);
RcppExport SEXP _RCOMPSs_register_core_element(SEXP CESignatureSEXP, SEXP ImplSignatureSEXP, SEXP ImplConstraintsSEXP, SEXP ImplTypeSEXP, SEXP ImplLocalSEXP, SEXP ImplIOSEXP, SEXP prologSEXP, SEXP epilogSEXP, SEXP containerSEXP, SEXP typeArgsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type CESignature(CESignatureSEXP);
    Rcpp::traits::input_parameter< std::string >::type ImplSignature(ImplSignatureSEXP);
    Rcpp::traits::input_parameter< std::string >::type ImplConstraints(ImplConstraintsSEXP);
    Rcpp::traits::input_parameter< std::string >::type ImplType(ImplTypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type ImplLocal(ImplLocalSEXP);
    Rcpp::traits::input_parameter< std::string >::type ImplIO(ImplIOSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type prolog(prologSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type epilog(epilogSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type container(containerSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type typeArgs(typeArgsSEXP);
    register_core_element(CESignature, ImplSignature, ImplConstraints, ImplType, ImplLocal, ImplIO, prolog, epilog, container, typeArgs);
    return R_NilValue;
END_RCPP
}
// process_task
void process_task(long int app_id, std::string signature, std::string on_failure, int time_out, int priority, int num_nodes, int reduce, int chunk_size, int replicated, int distributed, int has_target, int num_returns, List values, CharacterVector names, IntegerVector compss_types, IntegerVector compss_directions, IntegerVector compss_streams, CharacterVector compss_prefixes, CharacterVector content_types, CharacterVector weights, IntegerVector keep_renames);
RcppExport SEXP _RCOMPSs_process_task(SEXP app_idSEXP, SEXP signatureSEXP, SEXP on_failureSEXP, SEXP time_outSEXP, SEXP prioritySEXP, SEXP num_nodesSEXP, SEXP reduceSEXP, SEXP chunk_sizeSEXP, SEXP replicatedSEXP, SEXP distributedSEXP, SEXP has_targetSEXP, SEXP num_returnsSEXP, SEXP valuesSEXP, SEXP namesSEXP, SEXP compss_typesSEXP, SEXP compss_directionsSEXP, SEXP compss_streamsSEXP, SEXP compss_prefixesSEXP, SEXP content_typesSEXP, SEXP weightsSEXP, SEXP keep_renamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long int >::type app_id(app_idSEXP);
    Rcpp::traits::input_parameter< std::string >::type signature(signatureSEXP);
    Rcpp::traits::input_parameter< std::string >::type on_failure(on_failureSEXP);
    Rcpp::traits::input_parameter< int >::type time_out(time_outSEXP);
    Rcpp::traits::input_parameter< int >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< int >::type num_nodes(num_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type reduce(reduceSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type replicated(replicatedSEXP);
    Rcpp::traits::input_parameter< int >::type distributed(distributedSEXP);
    Rcpp::traits::input_parameter< int >::type has_target(has_targetSEXP);
    Rcpp::traits::input_parameter< int >::type num_returns(num_returnsSEXP);
    Rcpp::traits::input_parameter< List >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type compss_types(compss_typesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type compss_directions(compss_directionsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type compss_streams(compss_streamsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type compss_prefixes(compss_prefixesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type content_types(content_typesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type keep_renames(keep_renamesSEXP);
    process_task(app_id, signature, on_failure, time_out, priority, num_nodes, reduce, chunk_size, replicated, distributed, has_target, num_returns, values, names, compss_types, compss_directions, compss_streams, compss_prefixes, content_types, weights, keep_renames);
    return R_NilValue;
END_RCPP
}
// barrier
void barrier(long int app_id, bool no_more_tasks);
RcppExport SEXP _RCOMPSs_barrier(SEXP app_idSEXP, SEXP no_more_tasksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long int >::type app_id(app_idSEXP);
    Rcpp::traits::input_parameter< bool >::type no_more_tasks(no_more_tasksSEXP);
    barrier(app_id, no_more_tasks);
    return R_NilValue;
END_RCPP
}
// Get_File
void Get_File(long int app_id, std::string outputfileName);
RcppExport SEXP _RCOMPSs_Get_File(SEXP app_idSEXP, SEXP outputfileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long int >::type app_id(app_idSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputfileName(outputfileNameSEXP);
    Get_File(app_id, outputfileName);
    return R_NilValue;
END_RCPP
}
// Get_MasterWorkingDir
Rcpp::CharacterVector Get_MasterWorkingDir();
RcppExport SEXP _RCOMPSs_Get_MasterWorkingDir() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(Get_MasterWorkingDir());
    return rcpp_result_gen;
END_RCPP
}
// Extrae_eventandcounters
void Extrae_event_and_counters(extrae_type_t group, extrae_value_t id);
RcppExport SEXP _RCOMPSs_Extrae_event_and_counters(SEXP groupSEXP, SEXP idSEXP) {
BEGIN_RCPP
   Rcpp::RNGScope rcpp_rngScope_gen;
   Rcpp::traits::input_parameter< extrae_type_t >::type group(groupSEXP);
   Rcpp::traits::input_parameter< extrae_value_t >::type id(idSEXP);
   Extrae_eventandcounters(group, id);
   return R_NilValue;
END_RCPP
}
// Extrae_ini
void Extrae_ini();
RcppExport SEXP _RCOMPSs_Extrae_ini() {
BEGIN_RCPP
   Rcpp::RNGScope rcpp_rngScope_gen;
   Extrae_init();
   return R_NilValue;
END_RCPP
}
// Extrae_flu
void Extrae_flu();
RcppExport SEXP _RCOMPSs_Extrae_flu() {
BEGIN_RCPP
   Rcpp::RNGScope rcpp_rngScope_gen;
   Extrae_flush();
   return R_NilValue;
END_RCPP
}
// Extrae_ini
void Extrae_fin();
RcppExport SEXP _RCOMPSs_Extrae_fin() {
BEGIN_RCPP
   Rcpp::RNGScope rcpp_rngScope_gen;
   Extrae_fini();
   return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCOMPSs_start_runtime", (DL_FUNC) &_RCOMPSs_start_runtime, 0},
    {"_RCOMPSs_stop_runtime", (DL_FUNC) &_RCOMPSs_stop_runtime, 1},
    {"_RCOMPSs_register_core_element", (DL_FUNC) &_RCOMPSs_register_core_element, 10},
    {"_RCOMPSs_process_task", (DL_FUNC) &_RCOMPSs_process_task, 21},
    {"_RCOMPSs_barrier", (DL_FUNC) &_RCOMPSs_barrier, 2},
    {"_RCOMPSs_Get_File", (DL_FUNC) &_RCOMPSs_Get_File, 2},
    {"_RCOMPSs_Get_MasterWorkingDir", (DL_FUNC) &_RCOMPSs_Get_MasterWorkingDir, 0},
    {"_RCOMPSs_Extrae_event_and_counters", (DL_FUNC) &_RCOMPSs_Extrae_event_and_counters, 2},
    {"_RCOMPSs_Extrae_ini", (DL_FUNC) &_RCOMPSs_Extrae_ini, 0},
    {"_RCOMPSs_Extrae_flu", (DL_FUNC) &_RCOMPSs_Extrae_flu, 0},
    {"_RCOMPSs_Extrae_fin", (DL_FUNC) &_RCOMPSs_Extrae_fin, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCOMPSs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
